{
  "swagger": "2.0",
  "info": {
    "description": " ## Welcome To The Ziflow API \n The Ziflow API is built to allow you to easily and quickly embed Ziflow’s proofing features in your own application or create an integration between Ziflow and any other application. This API is the same one we use to power Ziflow! \n The API is a RESTful interface, essentially providing programmatic access to the features and data in the system. If you’ve interacted with a RESTful API before, many of the concepts will be familiar - it provides predictable URLs for accessing resources and uses built-in HTTP features. \n  The API accepts JSON or form-encoded content in requests and returns JSON content in all of its responses, including errors. Only the UTF-8 character encoding is supported for both requests and responses.\n  ### Base domain \n API calls to Ziflow should be made to the https://api.ziflow.io/v1 . \n  ### Security & Authentication \n The Ziflow API is an SSL-only API. You must be a verified user to make API requests. Ziflow currently supports basic authentication using an API token. The API token can be found on your “Contact details” page. To access, click on your avatar in the top right and select \"View profile\". From there, click on \"API key.\"",
    "version": "",
    "title": "Ziflow API",
    "x-logo":{
      "url": ""
    }
  },
  "host": "api.ziflow.io",
  "basePath": "/v1",
  "schemes": [
    "https"
  ],
  "paths": {
    "/proofs": {
      "get": {
        "tags": [
          "proofs"
        ],
        "summary": "Get proof list",
        "description": "Returns a list of all proof's latest versions which are visible to the author of the request. List is sorted from newest to oldest.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "count",
            "in": "path",
            "type": "integer",
            "required": false,
            "description": "Specifies number of records to return with max=100"
          },
          {
            "name": "page",
            "in": "path",
            "type": "integer",
            "required": false,
            "description": "Used for pagination, starting at 1"
          }
        ],
        "responses": {
          "200": {
            "description": "List of Proofs",
            "schema": {
              "$ref": "#/definitions/ProofList"
            }
          }
        },
        "security": [
          {
            "Header API key parameter": []
          },
          {
            "Basic HTTP authentication": []
          },
          {
            "Query API key parameter": []
          }
        ]
      },
      "post": {
        "tags": [
          "proofs"
        ],
        "summary": "Create new proof",
        "description": "Creates a new proof, version or batch of proofs in Ziflow with a simple HTTP POST. \n \n  The POST body must include: \n * At least one URL(s) to a file or a website page. We currently support downloading files using HTTP/HTTPS and S3 also with parametrized URL.  You may also specify a URL for live website or web capturing by including the type: 'web-interactive' or 'web-static'. \n * At least one stage with member that must be the owner of the proof. The proof will be created immediately and start processing. Once processed reviewers will be notified. \n \n Returns proof_id in response body. \n \n Lock and stage_trigger (except deadline object) can be edited only on Enterprise edition. \n \n In case lock type - next_stage_starts, parent stage can be defined only by unique stage_name. \n \n In trigger object parent_stage can be defined only by unique stage_name",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Proof object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PostProof"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Standard response",
            "schema": {
              "$ref": "#/definitions/ProofIdResponse"
            }
          },
          "201": {
            "description": "Proof created from workflow template",
            "schema": {
              "$ref": "#/definitions/ProofFromTemplate"
            }
          }
        },
        "security": [
          {
            "Header API key parameter": []
          },
          {
            "Basic HTTP authentication": []
          },
          {
            "Query API key parameter": []
          }
        ]
      }
    },
    "/proofs/{id}": {
      "get": {
        "tags": [
          "proofs"
        ],
        "summary": "Get specific proof by ID",
        "description": "Returns information about a single proof version.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Proof id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Proof"
            },
            "description": "Proof details"
          }
        },
        "security": [
          {
            "Header API key parameter": []
          },
          {
            "Basic HTTP authentication": []
          },
          {
            "Query API key parameter": []
          }
        ]
      },
      "delete": {
        "tags": [
          "proofs"
        ],
        "summary": "Delete a proof",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Proof id to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Empty response body"
          }
        },
        "security": [
          {
            "Header API key parameter": []
          },
          {
            "Basic HTTP authentication": []
          },
          {
            "Query API key parameter": []
          }
        ]
      },
      "put": {
        "tags": [
          "proofs"
        ],
        "summary": "Update an existing proof",
        "description": "A specific, existing proof can be updated by making a PUT request on the URL for that proof. Only the fields provided in the data block will be updated; any unspecified fields will remain unchanged. \n \n ### Helpful tips: \n * It is best to specify only the fields you wish to change. \n  * When working with Stages and Members you are only able to pass the id, which means we'll leave that object unchanged. This is useful when adding or deleting Stages or Members on the proof. \n \n Returns the complete updated proof record. \n \n Lock and stage_trigger (except deadline object) can only be edited on Enterprise edition. \n In case lock type - next_stage_starts, the parent stage can be defined only by stage_id. \n In trigger object parent_stage can only be defined by stage_id",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Proof id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Proof object with updated data",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PutProof"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated proof body",
            "schema": {
              "$ref": "#/definitions/Proof"
            }
          }
        },
        "security": [
          {
            "Header API key parameter": []
          },
          {
            "Basic HTTP authentication": []
          },
          {
            "Query API key parameter": []
          }
        ]
      }
    },
    "/proofs/{id}/reviewers/status": {
      "post": {
        "tags": [
          "proofs"
        ],
        "summary": "Post reviewer's status",
        "description": "Reviewer id is optional. \n Either decision or completed must be provided dependent on user's review permissions",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Proof id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ReviewersStatus"
            }
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Member"
            },
            "description": "Updated reviewer object"
          }
        },
        "security": [
          {
            "Header API key parameter": []
          },
          {
            "Basic HTTP authentication": []
          },
          {
            "Query API key parameter": []
          }
        ]
      },
      "put": {
        "tags": [
          "proofs"
        ],
        "summary": "Update reviewer's status",
        "description": "Reviewer id is optional. \n Either decision or completed must be provided dependent on user's review permissions",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Proof id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ReviewersStatus"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated reviewer object",
            "schema": {
              "$ref": "#/definitions/Member"
            }
          }
        },
        "security": [
          {
            "Header API key parameter": []
          },
          {
            "Basic HTTP authentication": []
          },
          {
            "Query API key parameter": []
          }
        ]
      }
    },
    "/proofs/{id}/allVersions": {
      "delete": {
        "tags": [
          "proofs"
        ],
        "summary": "Delete all proof's versions",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Proof id to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Empty response body"
          }
        },
        "security": [
          {
            "Header API key parameter": []
          },
          {
            "Basic HTTP authentication": []
          },
          {
            "Query API key parameter": []
          }
        ]
      }
    },
    "/proofs/{id}/stages/{stage_id}/reviewers": {
      "post": {
        "tags": [
          "proofs"
        ],
        "summary": "Add reviewer directly to specific stage",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Proof id",
            "required": true,
            "type": "string"
          },
          {
            "name": "stage_id",
            "in": "path",
            "description": "Id of stage in proof to which you want to add reviewer",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Member object",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PostMember"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Member"
              }
            },
            "description": "Added member object"
          }
        },
        "security": [
          {
            "Header API key parameter": []
          },
          {
            "Basic HTTP authentication": []
          },
          {
            "Query API key parameter": []
          }
        ]
      }
    },
    "/users": {
      "get": {
        "tags": [
          "people"
        ],
        "summary": "Get all users",
        "description": "Returns list of all users.",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Users"
            }
          }
        },
        "security": [
          {
            "Header API key parameter": []
          },
          {
            "Basic HTTP authentication": []
          },
          {
            "Query API key parameter": []
          }
        ]
      }
    },
    "/users/{id}": {
      "get": {
        "tags": [
          "people"
        ],
        "summary": "Get User",
        "description": "Returns information about a specific user in the account.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Contact id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        },
        "security": [
          {
            "Header API key parameter": []
          },
          {
            "Basic HTTP authentication": []
          },
          {
            "Query API key parameter": []
          }
        ]
      },
      "delete": {
        "tags": [
          "people"
        ],
        "summary": "Delete user",
        "description": "A specific, existing proof can be deleted by making a DELETE request on the URL for that proof. \n Returns empty data record",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Contact id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "Header API key parameter": []
          },
          {
            "Basic HTTP authentication": []
          },
          {
            "Query API key parameter": []
          }
        ]
      }
    },
    "/contacts": {
      "get": {
        "tags": [
          "people"
        ],
        "summary": "Get all contacts",
        "description": "Returns list of all contacts.",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Contacts"
            }
          }
        },
        "security": [
          {
            "Header API key parameter": []
          },
          {
            "Basic HTTP authentication": []
          },
          {
            "Query API key parameter": []
          }
        ]
      }
    },
    "/contacts/{id}": {
      "get": {
        "tags": [
          "people"
        ],
        "summary": "Get Contact",
        "description": "Returns information about a specific contact in the account.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Contact id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Contact"
            }
          }
        },
        "security": [
          {
            "Header API key parameter": []
          },
          {
            "Basic HTTP authentication": []
          },
          {
            "Query API key parameter": []
          }
        ]
      }
    },
    "/proofs/{id}/comments": {
      "get": {
        "tags": [
          "comments"
        ],
        "summary": "Get proof's comment list",
        "description": "Returns list of all comments for a specific proof.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Proof id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/CommentList"
            }
          }
        },
        "security": [
          {
            "Header API key parameter": []
          },
          {
            "Basic HTTP authentication": []
          },
          {
            "Query API key parameter": []
          }
        ]
      },
      "post": {
        "tags": [
          "comments"
        ],
        "summary": "Get proof's comment list",
        "description": "Returns list of all comments for a specific proof.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Proof id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Pet object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PostComment"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ProofIdResponse"
            }
          }
        },
        "security": [
          {
            "Header API key parameter": []
          },
          {
            "Basic HTTP authentication": []
          },
          {
            "Query API key parameter": []
          }
        ]
      }
    },
    "/proofs/{id}/comments/{comment_id}": {
      "get": {
        "tags": [
          "comments"
        ],
        "summary": "Get comment",
        "description": "Returns specific comment.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Proof id",
            "required": true,
            "type": "string"
          },
          {
            "name": "comment_id",
            "in": "path",
            "description": "comment id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/GetComment"
            }
          }
        },
        "security": [
          {
            "Header API key parameter": []
          },
          {
            "Basic HTTP authentication": []
          },
          {
            "Query API key parameter": []
          }
        ]
      }
    },
    "/webhooks": {
      "post": {
        "tags": [
          "webhooks"
        ],
        "summary": "Create webhooks configuration",
        "description": "Creates a new subscription with a simple HTTP POST. \n Can be performed only by user with Admin rights.",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Webhook configuration",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PostWebhookSubscription"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/WebhookSubscription"
            }
          }
        },
        "security": [
          {
            "Header API key parameter": []
          },
          {
            "Basic HTTP authentication": []
          },
          {
            "Query API key parameter": []
          }
        ],
        "x-code-samples": {
          "lang": "JSON"
        }
      }
    },
    "/webhooks/{subscription_id}": {
      "delete": {
        "tags": [
          "webhooks"
        ],
        "summary": "Delete webhooks configuration",
        "description": "Deletes subscription with a simple HTTP POST. \n Can be performed only by user with Admin rights.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Subscription id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "Header API key parameter": []
          },
          {
            "Basic HTTP authentication": []
          },
          {
            "Query API key parameter": []
          }
        ]
      }
    },
    "/target/": {
      "get": {
        "tags": [
          "webhooks"
        ],
        "summary": "Webhook Event structure",
        "description": " Description of webhook event structure. \n \n Fake request to show webhook event structure.",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/WebhookEvent"
            }
          }
        },
        "security": [
          {
            "Header API key parameter": []
          },
          {
            "Basic HTTP authentication": []
          },
          {
            "Query API key parameter": []
          }
        ]
      }
    },
    "/workflowtemplates": {
      "get": {
        "tags": [
          "workflow template"
        ],
        "summary": "Get list of workflow templates",
        "description": "Request available only on Enterprise edition. Can be performed only by users with admin rights.",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/WorkflowTemplatesList"
            }
          }
        },
        "security": [
          {
            "Header API key parameter": []
          },
          {
            "Basic HTTP authentication": []
          },
          {
            "Query API key parameter": []
          }
        ]
      }
    },
    "/folders": {
      "get": {
        "tags": [
          "folders"
        ],
        "summary": "Get list of top level folders",
        "description": ".",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Folder"
              }
            }
          }
        },
        "security": [
          {
            "Header API key parameter": []
          },
          {
            "Basic HTTP authentication": []
          },
          {
            "Query API key parameter": []
          }
        ]
      }
    },
    "/folders/{id}": {
      "get": {
        "tags": [
          "folders"
        ],
        "summary": "Get list of sub-folders with given parent folder id",
        "description": ".",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Folder id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Folder"
              }
            }
          }
        },
        "security": [
          {
            "Header API key parameter": []
          },
          {
            "Basic HTTP authentication": []
          },
          {
            "Query API key parameter": []
          }
        ]
      }
    }
  },
  "securityDefinitions": {
    "Header API key parameter": {
      "type": "apiKey",
      "name": "apikey",
      "in": "header",
      "description": "Provide api key as header parameter named 'apikey'."
    },
    "Basic HTTP authentication": {
      "type": "basic",
      "description": "Provide apiKey as Username and leave password empty"
    },
    "Query API key parameter": {
      "type": "apiKey",
      "name": "apikey",
      "in": "query",
      "description": "Provide api key as query parameter"
    }
  },
  "definitions": {
    "WebhookEvent": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "events": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "event_id": {
                  "type": "string",
                  "example": "48219ea8-5b74-4c50-9dc2-11b01d218fbd"
                },
                "webhook_id": {
                  "type": "string",
                  "example": "d8bb19a0-198c-4ec8-b569-c4166bf37ef2"
                },
                "contact": {
                  "$ref": "#/definitions/Contact"
                },
                "event_type": {
                  "type": "string",
                  "example": "proof"
                },
                "proof_event": {
                  "type": "object",
                  "properties": {
                    "proof_id": {
                      "type": "string",
                      "example": "35b26dd9-4e8c-4fc5-a9ec-c68c8fb2e086"
                    },
                    "version_previous_id": {
                      "type": "string",
                      "example": "79b26dd9-6e8c-4fc5-bg9e-c68c8fb4g254"
                    },
                    "action": {
                      "enum": [
                        "created",
                        "updated",
                        "processed",
                        "failed",
                        "comment",
                        "decision",
                        "status",
                        "deleted"
                      ],
                      "type": "string",
                      "example": "comment"
                    },
                    "comment_event": {
                      "type": "object",
                      "default": null,
                      "x-nullable": true,
                      "properties": {
                        "comment_id": {
                          "type": "string",
                          "example": "e92a3091-d5d0-4d89-89bf-3b93a468bf97"
                        },
                        "parent_id": {
                          "type": "string",
                          "example": null
                        },
                        "action": {
                          "enum": [
                            "created",
                            "changed"
                          ],
                          "type": "string",
                          "example": "created"
                        }
                      }
                    },
                    "decision_event": {
                      "type": "object",
                      "x-nullable": true,
                      "default": null,
                      "properties": {
                        "reviewer_id": {
                          "type": "string",
                          "example": "af1f6f4f-8b71-4351-b9be-4007aad62266"
                        }
                      }
                    },
                    "created_at": {
                      "type": "string",
                      "example": "2018-06-13T04:50:35.521Z"
                    },
                    "attempt_number": {
                      "type": "integer",
                      "example": 1
                    },
                    "attempt_at": {
                      "type": "string",
                      "example": "2018-06-13T04:50:35.664Z"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "WebhookSubscription": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "example": "499871d0-d05b-446e-a703-38d767adaae4"
        },
        "name": {
          "type": "string",
          "example": "Subscription name"
        },
        "target": {
          "type": "string",
          "example": "https://yourpage.com"
        },
        "active": {
          "type": "boolean",
          "example": true
        },
        "subscription_types": {
          "$ref": "#/definitions/SubTypes"
        },
        "created_at": {
          "type": "string",
          "example": "2018-05-13T08:43:37.142Z"
        }
      }
    },
    "SubTypes": {
      "type": "object",
      "properties": {
        "proof": {
          "type": "object",
          "properties": {
            "all": {
              "type": "boolean",
              "example": true
            },
            "created": {
              "type": "boolean",
              "example": true
            },
            "processed": {
              "type": "boolean",
              "example": true
            },
            "changed": {
              "type": "boolean",
              "example": true
            },
            "deleted": {
              "type": "boolean",
              "example": true
            },
            "status_change": {
              "type": "boolean",
              "example": true
            },
            "comment": {
              "type": "boolean",
              "example": true
            },
            "decision": {
              "type": "boolean",
              "example": true
            }
          }
        }
      }
    },
    "PostWebhookSubscription": {
      "type": "object",
      "required": [
        "name",
        "target",
        "subscription_types"
      ],
      "properties": {
        "name": {
          "type": "string",
          "example": "Subscription name"
        },
        "target": {
          "type": "string",
          "example": "https://yourpage.com"
        },
        "active": {
          "type": "boolean",
          "default": false,
          "example": true
        },
        "subscription_types": {
          "$ref": "#/definitions/SubTypes"
        }
      }
    },
    "ReviewersStatus": {
      "type": "object",
      "description": "",
      "properties": {
        "reviewer_id": {
          "type": "string",
          "example": "539b1f11-cf33-493f-9195-20ba22fe3d1e"
        },
        "decision": {
          "enum": [
            "null",
            "changes_required",
            "approved_with_changes",
            "approved",
            "not_relevant"
          ],
          "type": "string",
          "required": true,
          "example": "changes_required"
        },
        "completed": {
          "type": "boolean",
          "required": true,
          "example": true
        }
      }
    },
    "User": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "example": "ec2b4aee-42b6-42f8-92cd-264d1c9d4d0c"
        },
        "first_name": {
          "type": "string",
          "example": "User"
        },
        "last_name": {
          "type": "string",
          "example": "Name"
        },
        "account_owner": {
          "type": "boolean",
          "example": false
        },
        "email": {
          "type": "string",
          "example": "name@domain.com"
        },
        "roles": {
          "type": "array",
          "items": {
            "enum": [
              "admin",
              "manager",
              "billing",
              "user"
            ],
            "type": "string",
            "example": "manager"
          }
        },
        "phone": {
          "type": "string",
          "example": "+4412345678911"
        },
        "timezone": {
          "type": "string",
          "example": "Europe/London"
        },
        "company": {
          "type": "string",
          "example": "Awesome Company"
        },
        "verified": {
          "type": "boolean",
          "example": true
        },
        "active": {
          "type": "boolean",
          "example": true
        },
        "group": {
          "type": "array",
          "items": {
            "type": "string",
            "example": "67aab501-7d6d-4b31-9bec-398fd61ec0a3"
          }
        }
      }
    },
    "Users": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/User"
      }
    },
    "Contact": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "example": "ec2b4aee-42b6-42f8-92cd-264d1c9d4d0c",
          "readOnly": true
        },
        "type": {
          "type": "string",
          "description": "user or guest",
          "readOnly": true
        },
        "first_name": {
          "type": "string",
          "description": "For contact type 'guest' null value is also allowed",
          "example": "User",
          "readOnly": true
        },
        "last_name": {
          "type": "string",
          "description": "For contact type 'guest' null value is also allowed",
          "readOnly": true,
          "example": "Name"
        },
        "email": {
          "type": "string",
          "readOnly": true,
          "example": "name@domain.com"
        },
        "roles": {
          "type": "array",
          "readOnly": true,
          "items": {
            "enum": [
              "admin",
              "manager",
              "billing",
              "user"
            ],
            "type": "string",
            "example": "manager"
          },
          "description": "For contact 'guest' value is always null"
        },
        "phone": {
          "type": "string",
          "example": "+4412345678911",
          "readOnly": true
        },
        "company": {
          "type": "string",
          "description": "Company name",
          "example": "ABC Inc",
          "readOnly": true
        },
        "tenant": {
          "$ref": "#/definitions/Tenant"
        },
        "verified": {
          "type": "boolean",
          "description": "For guest always false",
          "readOnly": true
        },
        "blocked": {
          "type": "boolean",
          "readOnly": true,
          "example": false
        },
        "timezone": {
          "type": "string",
          "example": "Europe/London",
          "readOnly": true
        }
      }
    },
    "Contacts": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Contact"
      }
    },
    "Tenant": {
      "type": "object",
      "properties": {
        "tenant_id": {
          "type": "string",
          "readOnly": true,
          "example": "ab6d3631-b96b-49da-92c4-6b0af7fc1b48"
        },
        "subdomain": {
          "type": "string",
          "readOnly": true,
          "example": "your-subdomain"
        },
        "company_name": {
          "type": "string",
          "readOnly": true,
          "example": "Awesome Company"
        }
      }
    },
    "PutProof": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "default": "First source’s name",
          "example": "Proof Name"
        },
        "owner_email": {
          "type": "string",
          "example": "owner.mail@domain.com"
        },
        "locked": {
          "type": "boolean",
          "default": false,
          "example": false
        },
        "stages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PutStage"
          }
        },
        "lock_on_decisions": {
          "type": "boolean",
          "default": false,
          "example": true
        },
        "allow_source_download": {
          "type": "boolean",
          "default": false,
          "example": true
        },
        "secure_proofing": {
          "type": "boolean",
          "default": false,
          "example": true
        },
        "require_sign_in": {
          "type": "boolean",
          "default": false,
          "example": true
        },
        "suppress_all_emails": {
          "type": "boolean",
          "default": false,
          "example": false,
          "description": "If true, Ziflow will not send any emails regarding this proof.nThe only emails that can be triggered are the emails that are sent when using the 'remind' function within the web application."
        },
        "folder_id": {
          "type": "string",
          "example": "1f1782e1-9c2b-428f-b39c-faab8f4efff4",
          "description": "Folder id may be required if set in Account proof settings - available only for admins on Business and Enterprise editions"
        }
      }
    },
    "PutStage": {
      "type": "object",
      "required": [
        "id",
        "members"
      ],
      "properties": {
        "id": {
          "type": "string",
          "description": "Provide id of every stage you wish to change or leave unchanged - missing stage id will be deleted.",
          "example": "6fb38b0a-1bbc-40ee-b1d1-656e2c3070f7"
        },
        "name": {
          "type": "string",
          "default": "Stage 1",
          "example": "New Stage name"
        },
        "final_status_calculation": {
          "type": "object",
          "description": "Defines how decision will be calculated - available on Business and Enterprise editions only.",
          "properties": {
            "reviewer_id": {
              "type": "string",
              "example": "61401205-8373-4e0d-b112-8525f86c7fcb",
              "description": "If type \"primary_decision_maker\" defines reviewer, who's decision will decide on stage status"
            },
            "type": {
              "enum": [
                "all_decisions",
                "only_one_decision",
                "primary_decision_maker"
              ],
              "type": "string",
              "example": "primary_decision_maker"
            }
          }
        },
        "only_one_decision": {
          "type": "boolean",
          "default": false,
          "example": false
        },
        "members": {
          "$ref": "#/definitions/PutMember"
        },
        "custom_email_subject": {
          "type": "string",
          "default": "null",
          "nullable": true,
          "example": "Updated custom subject"
        },
        "custom_email_message": {
          "type": "string",
          "default": "null",
          "nullable": true,
          "example": "Updated custom message"
        },
        "lock": {
          "$ref": "#/definitions/PutLock"
        },
        "stage_trigger": {
          "$ref": "#/definitions/PutStageTrigger"
        }
      }
    },
    "PutMember": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Provide id of every stage you wish to change or leave unchanged - missing stage id will be deleted.",
          "example": "6fb38b0a-1bbc-40ee-b1d1-656e2c3070f7"
        },
        "email": {
          "type": "string",
          "example": "new.reviewer@domain.com"
        },
        "view": {
          "type": "boolean",
          "description": "Always true",
          "example": true
        },
        "comment": {
          "type": "boolean",
          "default": true,
          "example": true
        },
        "decision": {
          "type": "boolean",
          "default": false,
          "example": true
        },
        "manage": {
          "type": "boolean",
          "default": false,
          "example": false
        },
        "notification": {
          "enum": [
            "all_activity",
            "replies_to_my_comments",
            "decisions",
            "final_decision",
            "hourly_digest",
            "daily_digest",
            "disabled"
          ],
          "type": "string",
          "default": "all_activity",
          "example": "decisions"
        }
      }
    },
    "PutStageTrigger": {
      "type": "object",
      "properties": {
        "trigger_id": {
          "type": "string",
          "readOnly": true,
          "example": "1d2a933b-3cb1-4028-a91b-0c8918b15582"
        },
        "trigger": {
          "$ref": "#/definitions/PutTrigger"
        },
        "deadline": {
          "$ref": "#/definitions/Deadline"
        }
      }
    },
    "PutTrigger": {
      "type": "object",
      "x-nullable": true,
      "properties": {
        "type": {
          "enum": [
            "immediately",
            "manual",
            "on_completion",
            "on_approved",
            "on_approved_or_approvedwithchanges",
            "deadline_reached"
          ],
          "type": "string",
          "example": "on_approved",
          "description": " Available only on Enterprise edition"
        },
        "parent_stage_id": {
          "type": "string",
          "nullable": true,
          "example": "ea0d6aec-1929-4e1a-8a10-6531ac659d3f",
          "description": " Available only on Enterprise edition"
        }
      }
    },
    "PutLock": {
      "type": "object",
      "x-nullable": true,
      "description": " Available only on Enterprise edition",
      "properties": {
        "type": {
          "enum": [
            "manual",
            "on_completion",
            "all_dependent_stages_started",
            "next_stage_starts"
          ],
          "type": "string",
          "example": "all_dependent_stages_started"
        },
        "next_stage_id": {
          "type": "string",
          "nullable": true,
          "default": null,
          "example": null
        }
      }
    },
    "PostProof": {
      "type": "object",
      "required": [
        "input",
        "stages"
      ],
      "properties": {
        "version_previous_id": {
          "type": "string",
          "description": "If provided and the user has rights to create a new version, this proof will become the new version.",
          "required": false
        },
        "name": {
          "type": "string",
          "default": "First source’s name",
          "example": "Proof Name"
        },
        "input": {
          "type": "array",
          "required": true,
          "items": {
            "$ref": "#/definitions/File"
          }
        },
        "combine": {
          "type": "boolean",
          "default": false,
          "description": "If true, the input sources are combined into one proof in the order passed through. The parameter is only available for the Business and Enterprise edition. For starter edtiton forced to false",
          "required": false,
          "example": false
        },
        "stages": {
          "type": "array",
          "required": true,
          "items": {
            "$ref": "#/definitions/PostStage"
          }
        },
        "lock_on_decisions": {
          "type": "boolean",
          "default": false,
          "example": true
        },
        "allow_source_download": {
          "type": "boolean",
          "default": false,
          "example": true
        },
        "secure_proofing": {
          "type": "boolean",
          "default": false,
          "example": true
        },
        "require_sign_in": {
          "type": "boolean",
          "default": false,
          "example": true
        },
        "suppress_all_emails": {
          "type": "boolean",
          "default": false,
          "description": "If true, Ziflow will not send any emails regarding this proof.nThe only emails that can be triggered are the emails that are sent when using the 'remind' function within the web application.",
          "example": false
        },
        "workflow_template": {
          "$ref": "#/definitions/WorkflowTemplate"
        },
        "folder_id": {
          "type": "string",
          "example": "1f1782e1-9c2b-428f-b39c-faab8f4efff4",
          "description": "Folder id may be required if set in Account proof settings - available only for admins on Business and Enterprise editions"
        }
      }
    },
    "PostStage": {
      "type": "object",
      "required": [
        "members"
      ],
      "properties": {
        "name": {
          "type": "string",
          "default": "Stage 1",
          "example": "Stage name"
        },
        "final_status_calculation": {
          "type": "object",
          "description": "Defines how decision will be calculated - available on Business and Enterprise editions only.",
          "properties": {
            "reviewer_email": {
              "type": "string",
              "example": "reviewer@domain.com",
              "description": "If type \"primary_decision_maker\" defines reviewer, who's decision will decide on stage status"
            },
            "type": {
              "enum": [
                "all_decisions",
                "only_one_decision",
                "primary_decision_maker"
              ],
              "type": "string",
              "example": "primary_decision_maker"
            }
          }
        },
        "only_one_decision": {
          "type": "boolean",
          "default": false,
          "example": true
        },
        "members": {
          "$ref": "#/definitions/PostMember"
        },
        "custom_email_subject": {
          "type": "string",
          "default": null,
          "example": "Custom email subject"
        },
        "custom_email_message": {
          "type": "string",
          "default": null,
          "example": "Custom email message"
        },
        "lock": {
          "$ref": "#/definitions/PostLock"
        },
        "stage_trigger": {
          "$ref": "#/definitions/PostStageTrigger"
        }
      }
    },
    "PostMember": {
      "type": "object",
      "required": [
        "email"
      ],
      "properties": {
        "email": {
          "type": "string",
          "required": true,
          "example": "name@domain.com"
        },
        "view": {
          "type": "boolean",
          "description": "Always true",
          "example": true
        },
        "comment": {
          "type": "boolean",
          "default": true,
          "example": true
        },
        "decision": {
          "type": "boolean",
          "default": false,
          "example": true
        },
        "manage": {
          "type": "boolean",
          "default": false,
          "example": false
        },
        "notification": {
          "enum": [
            "all_activity",
            "replies_to_my_comments",
            "decisions",
            "final_decision",
            "hourly_digest",
            "daily_digest",
            "disabled"
          ],
          "type": "string",
          "default": "all_activity",
          "example": "disabled"
        }
      }
    },
    "PostStageTrigger": {
      "type": "object",
      "x-nullable": true,
      "description": "Available only on Enterprise edition",
      "properties": {
        "trigger_id": {
          "type": "string",
          "readOnly": true,
          "example": "98ece0e3-7030-42be-8d45-2700109e1577"
        },
        "trigger": {
          "$ref": "#/definitions/PostTrigger"
        },
        "deadline": {
          "$ref": "#/definitions/Deadline"
        }
      }
    },
    "PostTrigger": {
      "type": "object",
      "properties": {
        "type": {
          "enum": [
            "immediately",
            "manual",
            "on_completion",
            "on_approved",
            "on_approved_or_approvedwithchanges",
            "deadline_reached"
          ],
          "type": "string",
          "default": null,
          "example": "om_approved"
        },
        "parent_stage_name": {
          "type": "string",
          "default": null,
          "example": "Stage 2"
        }
      }
    },
    "PostLock": {
      "type": "object",
      "x-nullable": true,
      "description": "Available only on Enterprise edition",
      "properties": {
        "type": {
          "enum": [
            "manual",
            "on_completion",
            "all_dependent_stages_started",
            "next_stage_starts"
          ],
          "type": "string",
          "default": null,
          "example": "next_stage_starts"
        },
        "next_stage_name": {
          "type": "string",
          "default": null,
          "example": "Next stage"
        }
      }
    },
    "Proof": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "example": "7c7f0b55-0a34-4fc7-a009-798051a22b61"
        },
        "name": {
          "type": "string",
          "default": "First source’s name",
          "example": "Proof Name"
        },
        "owner": {
          "$ref": "#/definitions/Contact"
        },
        "created_by": {
          "$ref": "#/definitions/Contact"
        },
        "version": {
          "type": "integer",
          "example": 2
        },
        "versions": {
          "$ref": "#/definitions/Versions"
        },
        "souce_files": {
          "$ref": "#/definitions/SourceFiles"
        },
        "status": {
          "enum": [
            "uploading",
            "in_progress",
            "completed",
            "failed"
          ],
          "type": "string",
          "example": "in_progress",
          "description": "The overall status of the proof",
          "readOnly": true
        },
        "locked": {
          "type": "boolean",
          "default": false,
          "example": false
        },
        "decision_status": {
          "enum": [
            "null",
            "changes_required",
            "approved_with_changes",
            "approved",
            "not_relevant"
          ],
          "type": "string",
          "default": "null",
          "description": "The overall proof status calculated from all the stages",
          "readOnly": true,
          "example": null
        },
        "public_link": {
          "type": "string",
          "description": "Either null or 'https://ziflow.ziflow.io/proof/84n0ntlb1aapkdmchjgkcn9b8j'",
          "readOnly": true,
          "example": "https://ziflow.ziflow.io/proof/84n0ntlb1aapkdmchjgkcn9b8j"
        },
        "stages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Stage"
          }
        },
        "lock_on_decisions": {
          "type": "boolean",
          "default": false,
          "example": true
        },
        "allow_source_download": {
          "type": "boolean",
          "default": false,
          "example": true
        },
        "secure_proofing": {
          "type": "boolean",
          "default": false,
          "example": true
        },
        "require_sign_in": {
          "type": "boolean",
          "default": false,
          "example": true
        },
        "download_link": {
          "type": "string",
          "description": "null or URL to download the source file(s)",
          "example": "https://ziflow-proofs.s3.com/Proofs/b5ffa-2d2f-d9dd7/5f61-b1d3-78be39/ProofName.extension"
        },
        "suppress_all_emails": {
          "type": "boolean",
          "default": false,
          "example": false,
          "description": "If true, Ziflow will not send any emails regarding this proof.nThe only emails that can be triggered are the emails that are sent when using the 'remind' function within the web application."
        },
        "workflow_template": {
          "$ref": "#/definitions/WorkflowTemplate"
        },
        "folder": {
          "$ref": "#/definitions/Folder"
        }
      }
    },
    "File": {
      "type": "object",
      "properties": {
        "source": {
          "type": "string",
          "description": "URL to proof file, can be parametrized",
          "example": "http://google.com"
        },
        "type": {
          "enum": [
            "file",
            "web-static",
            "web-interactive"
          ],
          "type": "string",
          "example": "web-static"
        }
      }
    },
    "WorkflowTemplate": {
      "type": "object",
      "x-nullable": true,
      "properties": {
        "id": {
          "type": "string",
          "description": "Available only on Enterprise edition. Id of an active template required to create proof from template",
          "example": "43d6beaa-7e00-45a7-b0a7-3ec05f8cae10"
        },
        "name": {
          "type": "string",
          "description": "Available only on Enterprise edition",
          "example": "web proof template"
        }
      }
    },
    "Stage": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "readOnly": true,
          "example": "98ece0e3-7030-42be-8d45-2700109e1577"
        },
        "name": {
          "type": "string",
          "default": "Stage 1",
          "example": "Stage 1"
        },
        "deadline": {
          "type": "string",
          "description": "Deadline date and time calculated when stage starts i.e. '2012-02-22T02:00:00.000Z'",
          "default": "null",
          "readOnly": true,
          "example": "2018-06-07T09:24:43.919Z"
        },
        "final_status_calculation": {
          "type": "object",
          "description": "Defines how stage decision status will be calculated - changing type and deifining reviewer is available on Business and Enterprise editions only. On Starter edition, object is read-only and reflects either all_decisions or \"only_one_decision\" if set true in field below",
          "properties": {
            "reviewer_id": {
              "type": "string",
              "example": "61401205-8373-4e0d-b112-8525f86c7fcb",
              "description": "If type \"primary_decision_maker\" defines the reviewer, who's decision will decide on stage status"
            },
            "reviewer_email": {
              "type": "string",
              "example": "reviewer@domain.com",
              "description": "If type \"primary_decision_maker\" defines the reviewer, who's decision will decide on stage status"

            },
            "type": {
              "enum": [
                "all_decisions",
                "only_one_decision",
                "primary_decision_maker"
              ],
              "type": "string",
              "example": "primary_decision_maker",
              "default": "all_decisions"
            }
          }
        },
        "only_one_decision": {
          "type": "boolean",
          "default": false,
          "example": true
        },
        "status": {
          "enum": [
            "null",
            "changes_required",
            "approved_with_changes",
            "approved",
            "not_relevant"
          ],
          "type": "string",
          "default": "null",
          "description": "The overall proof status calculated from all the reviewer's decisions",
          "readOnly": true,
          "example": null
        },
        "members": {
          "$ref": "#/definitions/Member"
        },
        "custom_email_subject": {
          "type": "string",
          "default": null,
          "example": "Email custom subject"
        },
        "custom_email_message": {
          "type": "string",
          "default": null,
          "example": "Email custom message"
        },
        "lock": {
          "$ref": "#/definitions/Lock"
        },
        "stage_trigger": {
          "$ref": "#/definitions/StageTrigger"
        }
      }
    },
    "StageTrigger": {
      "type": "object",
      "properties": {
        "trigger_id": {
          "type": "string",
          "readOnly": true,
          "example": "f7eb8492-b462-4259-af51-02ed1baaad12"
        },
        "trigger": {
          "$ref": "#/definitions/Trigger"
        },
        "deadline": {
          "$ref": "#/definitions/Deadline"
        }
      }
    },
    "Deadline": {
      "type": "object",
      "properties": {
        "days": {
          "type": "integer",
          "nullable": true,
          "example": 5
        },
        "time": {
          "type": "string",
          "example": "09:00:00.000Z",
          "nullable": true,
          "description": "Time in UTC, required only if days=0 and has to be at least 1 hour ahead from stage start"
        }
      }
    },
    "Trigger": {
      "type": "object",
      "properties": {
        "type": {
          "enum": [
            "immediately",
            "manual",
            "on_completion",
            "on_approved",
            "on_approved_or_approvedwithchanges",
            "deadline_reached"
          ],
          "type": "string",
          "example": "immediately"
        },
        "parent_stage_id": {
          "type": "string",
          "example": null
        },
        "parent_stage_name": {
          "type": "string",
          "example": null
        }
      }
    },
    "Lock": {
      "type": "object",
      "x-nullable": true,
      "example": null,
      "properties": {
        "type": {
          "enum": [
            "manual",
            "on_completion",
            "all_dependent_stages_started",
            "next_stage_starts"
          ],
          "type": "string"
        },
        "next_stage_name": {
          "type": "string"
        },
        "next_stage_id": {
          "type": "string"
        }
      }
    },
    "Member": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "readOnly": true,
          "example": "937a9fc3-db38-484f-ad99-e119ee9292e3"
        },
        "contact": {
          "$ref": "#/definitions/Contact"
        },
        "email": {
          "type": "string",
          "example": "name@domain.com"
        },
        "view": {
          "type": "boolean",
          "description": "Always true",
          "default": true,
          "example": true
        },
        "comment": {
          "type": "boolean",
          "default": true,
          "example": true
        },
        "decision": {
          "type": "boolean",
          "default": false,
          "example": true
        },
        "manage": {
          "type": "boolean",
          "default": false,
          "example": true
        },
        "notification": {
          "enum": [
            "all_activity",
            "replies_to_my_comments",
            "decisions",
            "final_decision",
            "hourly_digest",
            "daily_digest",
            "disabled"
          ],
          "type": "string",
          "default": "all_activity",
          "example": "final_decision"
        },
        "progress": {
          "$ref": "#/definitions/Progress"
        },
        "proof_url": {
          "type": "string",
          "readOnly": true,
          "description": "Visible only to admin and proof owner",
          "example": "https://qaekuent1.folderflow.com/proof/o0b7cumavaqo7579omech1gr2c"
        },
        "decision_status": {
          "enum": [
            "null",
            "changes_required",
            "approved_with_changes",
            "approved",
            "not_relevant"
          ],
          "type": "string",
          "readOnly": true,
          "example": null
        },
        "comments": {
          "type": "integer",
          "readOnly": true,
          "example": 3
        },
        "replies": {
          "type": "integer",
          "readOnly": true,
          "example": 2
        }
      }
    },
    "Progress": {
      "type": "object",
      "properties": {
        "notified": {
          "type": "boolean",
          "readOnly": true,
          "example": true
        },
        "opened": {
          "type": "boolean",
          "readOnly": true,
          "example": true
        },
        "commented": {
          "type": "boolean",
          "readOnly": true,
          "example": true
        },
        "completed": {
          "type": "boolean",
          "readOnly": true,
          "example": false
        }
      }
    },
    "SourceFiles": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true,
            "example": "742b1b73-c40f-46d7-93a8-0419a3bab7d0"
          },
          "type": {
            "enum": [
              "file",
              "web-static",
              "web-interactive"
            ],
            "type": "string",
            "example": "web-static",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "description": "File name",
            "readOnly": true,
            "example": "https://google/com"
          },
          "size": {
            "type": "integer",
            "nullable": "true",
            "readOnly": true,
            "example": null
          }
        }
      }
    },
    "Versions": {
      "type": "array",
      "items": {
        "type": "object",
        "readOnly": true,
        "properties": {
          "version": {
            "type": "integer",
            "readOnly": true,
            "example": 1
          },
          "version_id": {
            "type": "string",
            "readOnly": true,
            "example": "adbe0c29-819a-43ab-8f47-8dd9e71c7fd9"
          }
        }
      }
    },
    "ProofList": {
      "type": "object",
      "properties": {
        "proofs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Proof"
          }
        },
        "count": {
          "type": "integer",
          "example": 50
        },
        "page": {
          "type": "integer",
          "example": 3
        },
        "has_more": {
          "type": "boolean",
          "example": true
        }
      }
    },
    "ProofIdResponse": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "0d446679-7beb-4883-86a8-5da8db72980b"
          }
        }
      }
    },
    "ProofFromTemplate": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "workflow_template": {
            "$ref": "#/definitions/WorkflowTemplate"
          },
          "id": {
            "type": "string",
            "example": "0d446679-7beb-4883-86a8-5da8db72980b"
          }
        }
      }
    },
    "GetComment": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "example": "8c265dc2-654d-4f10-99d6-b3e82417da70"
        },
        "parent_comment_id": {
          "type": "string",
          "example": null
        },
        "proof_id": {
          "type": "string",
          "example": "43d6beaa-7e00-45a7-b0a7-3ec05f8cae10"
        },
        "comment": {
          "type": "string",
          "example": "Make red line 10px"
        },
        "sequence": {
          "type": "integer",
          "example": 3
        },
        "created_at": {
          "type": "string",
          "example": "2018-06-12T21:05:26.256Z"
        },
        "reviewer": {
          "type": "object",
          "properties": {
            "reviewer_id": {
              "type": "string",
              "example": "ed95536b-09f6-4512-a875-bc9ed836ba46"
            },
            "email": {
              "type": "string",
              "example": "name@domain.com"
            }
          }
        },
        "location": {
          "$ref": "#/definitions/Location"
        },
        "likes": {
          "type": "object",
          "properties": {
            "reviewer_id": {
              "type": "string",
              "example": "47e44668-165a-458d-8b68-2b3d727894f9"
            },
            "email": {
              "type": "string",
              "example": "designer@domain.com"
            }
          }
        },
        "replies": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Reply"
          }
        },
        "attachments": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "file_name": {
                "type": "string",
                "example": "somejpg.jpg"
              },
              "download_path": {
                "type": "string",
                "example": "https://domain-ziflow.aws.com/5rk3bk900e7jm8tmqriogll3jl/somejpg.jpg"
              }
            }
          }
        },
        "deleted": {
          "type": "boolean",
          "example": false
        },
        "private": {
          "type": "boolean",
          "example": false
        },
        "markers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Markers"
          }
        }
      }
    },
    "Markers": {
      "type": "object",
      "properties": {
        "type": {
          "enum": [
            "rectangle",
            "ellipse",
            "line",
            "arrow"
          ]
        },
        "color": {
          "type": "string",
          "description": "Color in HEX format ",
          "example": "#ADD8E6"
        },
        "start_point": {
          "$ref": "#/definitions/Coordinates"
        },
        "end_point": {
          "$ref": "#/definitions/Coordinates"
        }
      }
    },
    "Coordinates": {
      "type": "object",
      "properties": {
        "x": {
          "type": "integer",
          "example": 154
        },
        "y": {
          "type": "integer",
          "example": 238
        }
      }
    },
    "Location": {
      "type": "object",
      "description": "For static proof provide page number, for audio and video - start time",
      "properties": {
        "page": {
          "type": "integer",
          "example": 3
        },
        "start_time": {
          "type": "string",
          "description": "Time in format HH:mm:ss.SSS",
          "example": "00:02:51.258"
        }
      }
    },
    "CommentList": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/GetComment"
      }
    },
    "PostComment": {
      "type": "object",
      "required": [
        "comment",
        "location"
      ],
      "properties": {
        "parent_comment_id": {
          "type": "string",
          "example": null
        },
        "proof_id": {
          "type": "string",
          "example": "ee671e68-e7cb-4fa8-a9fc-9c486bfcad1c"
        },
        "comment": {
          "type": "string",
          "example": "We should change background color for brighter one"
        },
        "reviewer": {
          "type": "object",
          "properties": {
            "reviewer_id": {
              "type": "string",
              "example": "70f24795-0bc3-4404-b2bf-1c735a808696"
            },
            "email": {
              "type": "string",
              "example": "user@domain.com"
            }
          }
        },
        "location": {
          "$ref": "#/definitions/Location"
        },
        "markers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Markers"
          }
        }
      }
    },
    "Reply": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "example": "8c265dc2-654d-4f10-99d6-b3e82417da70"
        },
        "parent_comment_id": {
          "type": "string",
          "example": "bc8bb9f9-4c5f-4df7-8022-1f9a61e697fe"
        },
        "proof_id": {
          "type": "string",
          "example": "43d6beaa-7e00-45a7-b0a7-3ec05f8cae10"
        },
        "comment": {
          "type": "string",
          "example": "Agree"
        },
        "sequence": {
          "type": "integer",
          "example": 1
        },
        "created_at": {
          "type": "string",
          "example": "2018-06-12T21:05:26.256Z"
        },
        "reviewer": {
          "type": "object",
          "properties": {
            "reviewer_id": {
              "type": "string",
              "example": "ed95536b-09f6-4512-a875-bc9ed836ba46"
            },
            "email": {
              "type": "string",
              "example": "name@domain.com"
            }
          }
        },
        "location": {
          "$ref": "#/definitions/Location"
        },
        "likes": {
          "type": "object",
          "properties": {
            "reviewer_id": {
              "type": "string",
              "example": "47e44668-165a-458d-8b68-2b3d727894f9"
            },
            "email": {
              "type": "string",
              "example": "designer@domain.com"
            }
          }
        },
        "replies": {
          "type": "array",
          "items": {
            "type": null,
            "example": ""
          }
        },
        "attachments": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "file_name": {
                "type": "string",
                "example": "somejpg.jpg"
              },
              "download_path": {
                "type": "string",
                "example": "https://domain-ziflow.aws.com/5rk3bk900e7jm8tmqriogll3jl/somejpg.jpg"
              }
            }
          }
        },
        "deleted": {
          "type": "boolean",
          "example": false
        },
        "private": {
          "type": "boolean",
          "example": false
        },
        "markers": {
          "type": "array",
          "items": {
            "type": null,
            "example": ""
          }
        }
      }
    },
    "WorkflowTemplatesList": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "14f19fba-6fea-4df6-b0d4-59d4827a4ac5"
          },
          "name": {
            "type": "string",
            "example": "template name"
          },
          "owner": {
            "$ref": "#/definitions/Contact"
          },
          "created_by": {
            "$ref": "#/definitions/Contact"
          },
          "created_at": {
            "type": "string",
            "example": "2018-06-11T14:03:15.000Z"
          },
          "stages": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Stage"
            }
          },
          "active": {
            "type": "boolean",
            "example": true
          }
        }
      }
    },
    "Folder": {
      "x-nullable": true,
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "example": "1f1782e1-9c2b-428f-b39c-faab8f4efff4"
        },
        "name": {
          "type": "string",
          "example": "folder name"
        },
        "parent_folder_id": {
          "type": "string",
          "example": "095c96c5-d582-4f64-8038-95b520e02a98"
        },
        "private": {
          "type": "boolean",
          "example": true
        },
        "owner": {
          "$ref": "#/definitions/Contact"
        }
      }
    }
  },
  "externalDocs": {
    "description": "Release notes",
    "url": "https://www.ziflow.com/developers/api-reference/release-notes"
  },
  "tags": [
    {
      "name": "proofs",
      "description": "Proofs are one of the fundamental building blocks of Ziflow. \n It is important to note the distinction between how proofs are represented within the application vs the API: \n  * Application: only the latest version of a proof is visible to a user that is logged into the application. If a proof has 4 versions, the user would see v4 with v1 to v3 sitting “behind” the latest version. \n * API: each version is its own proof object and versions are linked by a parent ID, thereby creating a linked list of proof objects."
    },
    {
      "name": "folders",
      "description": "Folders"
    },
    {
      "name": "comments",
      "description": "Communication over the proofs is done via comments and replies function inside the Proof Viewer tool."
    },
    {
      "name": "people",
      "description": "In Ziflow there are two type of contacts - Ziflow users and guests that may have been invited into the proof approval process."
    },
    {
      "name": "webhooks",
      "description": "Webhooks allow you to subscribe to changes and be notified of these changes as they occur. \n Webhooks are basically an easy way to receive notification of changes (Events) via an HTTP POST instead of polling for them. For services accessible via HTTP this is vastly more convenient and efficient. \n \n Ziflow currently sends one Event object per POST. We will later on extend this and send arrays of Event objects per POST which should be handled by the target. "
    },
    {
      "name": "workflow template",
      "description": "workflow template"
    },
    {
      "name": "release notes",
      "description": "## Release 18.6 \n \n ### Date: tbd \n * GET/folders and GET/folders/id added \n * Create proof in folder/move proof to folder using \"folder_id\" field in POST and PUT proof request \n * GET Proof body object updated with new object Folder \n * New request POST reviewer directly to stage added \n * Final status calculation added to Proof's Stage object - can be modified on Enterprise and Business editions only. On starter edition it's read-only object. Impacted request's responses: GET/v1/proofs{id}, GET/v1/proofs and PUT/v1/proofs{id}  \n \n ## Release 18.5 \n \n ### Date: 7.06.2018 \n * Deadline setting changed - deadline can be set only in Deadline object present in Stage Trigger object, field deadline in Stage becomes read only and represents calculated deadline once Stage starts \n * Included workflow properties (Workflow template object, Lock stage, Stage Trigger in proof object model). Impact on all GET proof response's body, in POST proof body, options available to set only for Enterprise edition \n * GET /proofs returns proof list \n * GET all users \n * GET user by id \n * DELETE user by id \n * GET workflow template's list - Available for users with admin rights on Enterprise edition only \n * POST - create proof from workflow template \n * Extend POST and GET comment with markups "
    }
  ]
}