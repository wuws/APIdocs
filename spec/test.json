{
  "swagger": "2.0",
  "info": {
    "description": "The Ziflow API is built to allow you to easily and quickly embed Ziflow’s proofing features in your own application or create an integration between Ziflow and any other application. This API is the same one we use to power Ziflow! The API is a RESTful interface, essentially providing programmatic access to the features and data in the system. If you’ve interacted with a RESTful API before, many of the concepts will be familiar - it provides predictable URLs for accessing resources and uses built-in HTTP features. API calls to Ziflow should be made to the https://api.ziflow.io base domain  The API accepts JSON or form-encoded content in requests and returns JSON content in all of its responses, including errors. Only the UTF-8 character encoding is supported for both requests and responses.",
    "version": "1.0.0",
    "title": "Ziflow API"
  },
  "host": "api.ziflow.io",
  "basePath": "/v1",
  "schemes": [
    "https"
  ],
  "paths": {
    "/proofs": {
      "get": {
        "tags": [
          "proofs"
        ],
        "summary": "Get proof list",
        "description": "Returns array of proof object",
        "operationId": "addPet",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "count",
            "in": "header",
            "type": "integer",
            "required": false,
            "description": "Specifies number of records to return with max=100"
          },
          {
            "name": "page",
            "in": "header",
            "type": "integer",
            "required": false,
            "description": "Used for pagination, starting at 1"
          }
        ],
        "responses": {
          "200": {
            "description": "List of Proofs",
            "schema": {
              "$ref": "#/definitions/ProofList"
            }
          }
        },
        "security": [
          {
            "apiKey": []
          },
          {
            "basic_http": []
          }
        ]
      },
      "post": {
        "tags": [
          "proofs"
        ],
        "summary": "Create new proof",
        "description": "",
        "operationId": "updateProof",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Proof object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PostProof"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Standard response",
            "schema": {
              "$ref": "#/definitions/ProofIdResponse"
            }
          },
          "201": {
            "description": "Proof created from workflow tempalte",
            "schema": {
              "$ref": "#/definitions/ProofFromTemplate"
            }
          }
        },
        "security": [
          {
            "apiKey": []
          },
          {
            "basic_http": []
          }
        ]
      }
    },
    "/proofs/{id}": {
      "get": {
        "tags": [
          "proofs"
        ],
        "summary": "Get specific proof by ID",
        "description": "Returns information about a single proof version.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Status values that need to be considered for filter",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/GetProof"
            },
            "description": "Proof details"
          }
        },
        "security": [
          {
            "apiKey": []
          },
          {
            "basic_http": []
          }
        ]
      },
      "delete": {
        "tags": [
          "proofs"
        ],
        "summary": "Deletes a proof",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Proof id to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Empty response body"
          }
        },
        "security": [
          {
            "apiKey": []
          },
          {
            "basic_http": []
          }
        ]
      },
      "put": {
        "tags": [
          "proofs"
        ],
        "summary": "Update an existing proof",
        "description": "",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Proof id to delete",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Proof object with updated data",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PutProof"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated proof body",
            "schema": {
              "$ref": "#/definitions/GetProof"
            }
          }
        },
        "security": [
          {
            "apiKey": []
          },
          {
            "basic_http": []
          }
        ]
      }
    },
    "/proofs/{id}/reviewers/status": {
      "post": {
        "tags": [
          "proofs"
        ],
        "summary": "Post reviewer's status",
        "description": "Reviewer id is optional. \n Either decision or completed must be provided dependent on user's review permissions",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Proof id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ReviewersStatus"
            }
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Member"
            },
            "description": "Updated reviewer object"
          }
        },
        "security": [
          {
            "apiKey": []
          },
          {
            "basic_http": []
          }
        ]
      },
      "put": {
        "tags": [
          "proofs"
        ],
        "summary": "Update reviewer's status",
        "description": "Reviewer id is optional. \n Either decision or completed must be provided dependent on user's review permissions",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Proof id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ReviewersStatus"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated reviewer object",
            "schema": {
              "$ref": "#/definitions/Member"
            }
          }
        },
        "security": [
          {
            "apiKey": []
          },
          {
            "basic_http": []
          }
        ]
      }
    },
    "/proofs/{id}/allVersions": {
      "delete": {
        "tags": [
          "proofs"
        ],
        "summary": "Deletes all proof's versions",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Proof id to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Empty response body"
          }
        },
        "security": [
          {
            "apiKey": []
          },
          {
            "basic_http": []
          }
        ]
      }
    },
    "/users": {
      "get": {
        "tags": [
          "people"
        ],
        "summary": "Get all users",
        "description": "Returns list of all users.",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Users"
            }
          }
        },
        "security": [
          {
            "apiKey": []
          },
          {
            "basic_http": []
          }
        ]
      }
    },
    "/users/{id}": {
      "get": {
        "tags": [
          "people"
        ],
        "summary": "Get User",
        "description": "Returns information about a specific user in the account.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Contact id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        },
        "security": [
          {
            "apiKey": []
          },
          {
            "basic_http": []
          }
        ]
      },
      "delete": {
        "tags": [
          "people"
        ],
        "summary": "Delete user",
        "description": "Method used for deleting users from the account. Only a user with admin rights can delete other users. Returns empty data record",
        "operationId": "deleteUser",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Contact id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "adminApiKey": []
          }
        ]
      }
    },
    "/contacts": {
      "get": {
        "tags": [
          "people"
        ],
        "summary": "Get all contacts",
        "description": "Returns list of all contacts.",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Contacts"
            }
          }
        },
        "security": [
          {
            "apiKey": []
          },
          {
            "basic_http": []
          }
        ]
      }
    },
    "/contacts/{id}": {
      "get": {
        "tags": [
          "people"
        ],
        "summary": "Get Contact",
        "description": "Returns information about a specific contact in the account.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Contact id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Contact"
            }
          }
        },
        "security": [
          {
            "apiKey": []
          },
          {
            "basic_http": []
          }
        ]
      }
    },
    "/proofs/{id}/comments": {
      "get": {
        "tags": [
          "comments"
        ],
        "summary": "Get proof's comment list",
        "description": "Returns list of all comments for a specific proof.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Proof id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/CommentList"
            }
          }
        },
        "security": [
          {
            "apiKey": []
          },
          {
            "basic_http": []
          }
        ]
      },
      "post": {
        "tags": [
          "comments"
        ],
        "summary": "Get proof's comment list",
        "description": "Returns list of all comments for a specific proof.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Proof id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Pet object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PostComment"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ProofIdResponse"
            }
          }
        },
        "security": [
          {
            "apiKey": []
          },
          {
            "basic_http": []
          }
        ]
      }
    },
    "/proofs/{id}/comments/{comment_id}": {
      "get": {
        "tags": [
          "comments"
        ],
        "summary": "Get comment",
        "description": "Returns specific comment.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Proof id",
            "required": true,
            "type": "string"
          },
          {
            "name": "comment_id",
            "in": "path",
            "description": "comment id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/GetComment"
            }
          }
        },
        "security": [
          {
            "apiKey": []
          },
          {
            "basic_http": []
          }
        ]
      }
    },
    "/webhooks": {
      "post": {
        "tags": [
          "webhooks"
        ],
        "summary": "Post webhooks configuration",
        "description": "Creates a new subscription with a simple HTTP POST. \n Can be performed only by user with Admin rights.",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Webhook configuration",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PostWebhookSubscription"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/WebhookSubscription"
            }
          }
        },
        "security": [
          {
            "apiKey": []
          },
          {
            "basic_http": []
          }
        ]
      }
    },
    "webhooks/{subscription_id": {
      "delete": {
        "tags": [
          "webhooks"
        ],
        "summary": "Post webhooks configuration",
        "description": "Deletes subscription with a simple HTTP POST. \n Can be performed only by user with Admin rights.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Subscription id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "apiKey": []
          },
          {
            "basic_http": []
          }
        ]
      }
    }
  },
  "securityDefinitions": {
    "tags": [
      "authorization"
    ],
    "apiKey": {
      "type": "apiKey",
      "name": "header apikey",
      "in": "header",
      "description": "Provide api key as header parameter named 'apikey'."
    },
    "basic_http": {
      "type": "basic",
      "description": "Provide apiKey as Username and leave password empty"
    },
    "query_apiKey":{
      "type": "apiKey",
      "name": "query_apiKey",
      "in": "query",
      "description": "Provide api key as query parameter"
    },
    "adminApiKey": {
      "type": "apiKey",
      "name": "Admin api key",
      "in": "header"
    }
  },
  "definitions": {
    "WebhookSubscription": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "target": {
          "type": "string"
        },
        "active": {
          "type": "boolean"
        },
        "subscription_types": {
          "$ref": "#/definitions/SubTypes"
        },
        "created_at": {
          "type": "string"
        }
      }
    },
    "SubTypes": {
      "type": "object",
      "properties": {
        "proof": {
          "type": "object",
          "properties": {
            "all": {
              "type": "boolean"
            },
            "created": {
              "type": "boolean"
            },
            "processed": {
              "type": "boolean"
            },
            "changed": {
              "type": "boolean"
            },
            "deleted": {
              "type": "boolean"
            },
            "status_change": {
              "type": "boolean"
            },
            "comment": {
              "type": "boolean"
            },
            "decision": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "PostWebhookSubscription": {
      "type": "object",
      "required": [
        "name",
        "target",
        "subscription_types"
      ],
      "properties": {
        "name": {
          "type": "string"
        },
        "target": {
          "type": "string"
        },
        "active": {
          "type": "boolean",
          "deafult": false
        },
        "subscription_types": {
          "$ref": "#/definitions/SubTypes"
        }
      }
    },
    "ReviewersStatus": {
      "type": "object",
      "description": "",
      "properties": {
        "reviewer_id": {
          "type": "string"
        },
        "decision": {
          "enum": [
            "null",
            "changes_required",
            "approved_with_changes",
            "approved",
            "not_relevant"
          ],
          "type": "string",
          "required": true
        },
        "completed": {
          "type": "boolean",
          "required": true
        }
      }
    },
    "User": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "first_name": {
          "type": "string"
        },
        "last_name": {
          "type": "string"
        },
        "account_owner": {
          "type": "boolean"
        },
        "email": {
          "type": "string"
        },
        "roles": {
          "type": "array",
          "items": {
            "enum": [
              "admin",
              "manager",
              "billing",
              "user"
            ],
            "type": "string"
          }
        },
        "phone": {
          "type": "string"
        },
        "timezone": {
          "type": "string"
        },
        "company": {
          "type": "string"
        },
        "verified": {
          "type": "boolean"
        },
        "active": {
          "type": "boolean"
        },
        "group": {
          "type": "array",
          "items": {
            "type": "string",
            "example": "67aab501-7d6d-4b31-9bec-398fd61ec0a3"
          }
        }
      }
    },
    "Users": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/User"
      }
    },
    "Contact": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "example": "ec2b4aee-42b6-42f8-92cd-264d1c9d4d0c",
          "readOnly": true
        },
        "type": {
          "type": "string",
          "description": "user or guest",
          "readOnly": true
        },
        "first_name": {
          "type": "string",
          "description": "For contact type 'guest' null value is also allowed",
          "example": "User",
          "readOnly": true
        },
        "last_name": {
          "type": "string",
          "description": "For contact type 'guest' null value is also allowed",
          "readOnly": true,
          "example": "Name"
        },
        "email": {
          "type": "string",
          "readOnly": true,
          "example": "name@domain.com"
        },
        "roles": {
          "type": "array",
          "readOnly": true,
          "items": {
            "enum": [
              "admin",
              "manager",
              "billing",
              "user"
            ],
            "type": "string",
            "example": "manager"
          },
          "description": "For contact 'guest' value is always null"
        },
        "phone": {
          "type": "string",
          "example": "+4412345678911",
          "readOnly": true
        },
        "company": {
          "type": "string",
          "description": "Company name",
          "example": "ABC Inc",
          "readOnly": true
        },
        "tenant": {
          "$ref": "#/definitions/Tenant"
        },
        "verified": {
          "type": "boolean",
          "description": "For guest always false",
          "readOnly": true
        },
        "blocked": {
          "type": "boolean",
          "readOnly": true
        },
        "timezone": {
          "type": "string",
          "example": "'Europe/London'",
          "readOnly": true
        }
      }
    },
    "Contacts": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Contact"
      }
    },
    "Tenant": {
      "type": "object",
      "properties": {
        "tenant_id": {
          "type": "string",
          "readOnly": true
        },
        "subdomain": {
          "type": "string",
          "readOnly": true
        },
        "company_name": {
          "type": "string",
          "readOnly": true
        }
      }
    },
    "PutProof": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "default": "First source’s name",
          "example": "Proof Name"
        },
        "owner_email": {
          "type": "string"
        },
        "locked": {
          "type": "boolean",
          "default": false
        },
        "stages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PutStage"
          }
        },
        "lock_on_decisions": {
          "type": "boolean",
          "default": false
        },
        "allow_source_download": {
          "type": "boolean",
          "default": false
        },
        "secure_proofing": {
          "type": "boolean",
          "default": false
        },
        "require_sign_in": {
          "type": "boolean",
          "default": false
        },
        "suppress_all_emails": {
          "type": "boolean",
          "default": false,
          "description": "If true, Ziflow will not send any emails regarding this proof.nThe only emails that can be triggered are the emails that are sent when using the 'remind' function within the web application."
        }
      }
    },
    "PutStage": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "default": "Stage 1"
        },
        "only_one_decision": {
          "type": "boolean",
          "default": false
        },
        "members": {
          "$ref": "#/definitions/PutMember"
        },
        "custom_email_subject": {
          "type": "string",
          "default": "null",
          "nullable": true
        },
        "custom_email_message": {
          "type": "string",
          "default": "null",
          "nullable": true
        },
        "lock": {
          "$ref": "#/definitions/PutLock"
        },
        "stage_trigger": {
          "$ref": "#/definitions/PutStageTrigger"
        }
      }
    },
    "PutMember": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "readOnly": true
        },
        "email": {
          "type": "string"
        },
        "view": {
          "type": "boolean",
          "description": "Always true"
        },
        "comment": {
          "type": "boolean",
          "default": true
        },
        "decision": {
          "type": "boolean",
          "default": false
        },
        "manage": {
          "type": "boolean",
          "default": false
        },
        "notification": {
          "enum": [
            "all_activity",
            "replies_to_my_comments",
            "decisions",
            "final_decision",
            "hourly_digest",
            "daily_digest",
            "disabled"
          ],
          "type": "string",
          "default": "all_activity"
        }
      }
    },
    "PutStageTrigger": {
      "type": "object",
      "properties": {
        "trigger_id": {
          "type": "string",
          "readOnly": true
        },
        "trigger": {
          "$ref": "#/definitions/PutTrigger"
        },
        "deadline": {
          "$ref": "#/definitions/Deadline"
        }
      }
    },
    "PutTrigger": {
      "type": "object",
      "properties": {
        "type": {
          "enum": [
            "immediately",
            "manual",
            "on_completion",
            "on_approved",
            "on_approved_or_approvedwithchanges",
            "deadline_reached"
          ],
          "type": "string"
        },
        "parent_stage_id": {
          "type": "string"
        }
      }
    },
    "PutLock": {
      "type": "object",
      "properties": {
        "type": {
          "enum": [
            "manual",
            "on_completion",
            "all_dependent_stages_started",
            "next_stage_starts"
          ],
          "type": "string"
        },
        "next_stage_id": {
          "type": "string"
        }
      }
    },
    "PostProof": {
      "type": "object",
      "required": [
        "input",
        "stages"
      ],
      "properties": {
        "version_previous_id": {
          "type": "string",
          "description": "If provided and the user has rights to create a new version, this proof will become the new version of the proof.",
          "required": false
        },
        "name": {
          "type": "string",
          "default": "First source’s name",
          "example": "Proof Name"
        },
        "input": {
          "type": "array",
          "required": true,
          "items": {
            "$ref": "#/definitions/File"
          }
        }
      },
      "combine": {
        "type": "boolean",
        "default": false,
        "description": "If true the input sources are combined into one proof in the order passed through. The parameter is only available for the Business and Enterprise edition. For starter edtiton forced to false",
        "required": false
      },
      "stages": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/PostStage"
        }
      },
      "lock_on_decisions": {
        "type": "boolean",
        "default": false
      },
      "allow_source_download": {
        "type": "boolean",
        "default": false
      },
      "secure_proofing": {
        "type": "boolean",
        "default": false
      },
      "require_sign_in": {
        "type": "boolean",
        "default": false
      },
      "suppress_all_emails": {
        "type": "boolean",
        "default": false,
        "description": "If true, Ziflow will not send any emails regarding this proof.nThe only emails that can be triggered are the emails that are sent when using the 'remind' function within the web application."
      },
      "workflow_template": {
        "$ref": "#/definitions/WorkflowTemplate"
      }
    },
    "PostStage": {
      "type": "object",
      "required": [
        "members"
      ],
      "properties": {
        "name": {
          "type": "string",
          "default": "Stage 1"
        },
        "only_one_decision": {
          "type": "boolean",
          "default": false
        },
        "members": {
          "$ref": "#/definitions/PostMember"
        },
        "custom_email_subject": {
          "type": "string",
          "default": "null"
        },
        "custom_email_message": {
          "type": "string",
          "default": "null"
        },
        "lock": {
          "$ref": "#/definitions/PostLock"
        },
        "stage_trigger": {
          "$ref": "#/definitions/PostStageTrigger"
        }
      }
    },
    "PostMember": {
      "type": "object",
      "required": [
        "email"
      ],
      "properties": {
        "email": {
          "type": "string",
          "required": true
        },
        "view": {
          "type": "boolean",
          "description": "Always true"
        },
        "comment": {
          "type": "boolean",
          "default": true
        },
        "decision": {
          "type": "boolean",
          "default": false
        },
        "manage": {
          "type": "boolean",
          "default": false
        },
        "notification": {
          "enum": [
            "all_activity",
            "replies_to_my_comments",
            "decisions",
            "final_decision",
            "hourly_digest",
            "daily_digest",
            "disabled"
          ],
          "type": "string",
          "default": "all_activity"
        }
      }
    },
    "PostStageTrigger": {
      "type": "object",
      "x-nullable": true,
      "description": "Available only on Enterprise edition",
      "properties": {
        "trigger_id": {
          "type": "string",
          "readOnly": true
        },
        "trigger": {
          "$ref": "#/definitions/PostTrigger"
        },
        "deadline": {
          "$ref": "#/definitions/Deadline"
        }
      }
    },
    "PostTrigger": {
      "type": "object",
      "properties": {
        "type": {
          "enum": [
            "immediately",
            "manual",
            "on_completion",
            "on_approved",
            "on_approved_or_approvedwithchanges",
            "deadline_reached"
          ],
          "type": "string",
          "default": null
        },
        "parent_stage_name": {
          "type": "string",
          "default": null
        }
      }
    },
    "PostLock": {
      "type": "object",
      "x-nullable": true,
      "description": "Available only on Enterprise edition",
      "properties": {
        "type": {
          "enum": [
            "manual",
            "on_completion",
            "all_dependent_stages_started",
            "next_stage_starts"
          ],
          "type": "string",
          "default": null
        },
        "next_stage_name": {
          "type": "string",
          "default": null
        }
      }
    },
    "GetProof": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "example": "7c7f0b55-0a34-4fc7-a009-798051a22b61"
        },
        "name": {
          "type": "string",
          "default": "First source’s name",
          "example": "Proof Name"
        },
        "owner": {
          "$ref": "#/definitions/Contact"
        },
        "created_by": {
          "$ref": "#/definitions/Contact"
        },
        "version": {
          "type": "integer"
        },
        "versions": {
          "$ref": "#/definitions/Versions"
        },
        "souce_files": {
          "$ref": "#/definitions/SourceFiles"
        },
        "status": {
          "type": "string",
          "example": "‘uploading’ / ‘in_progress’ / ‘completed’ / ‘failed’",
          "description": "The overall status of the proof",
          "readOnly": true
        },
        "locked": {
          "type": "boolean",
          "default": false
        },
        "decision_status": {
          "enum": [
            "null",
            "changes_required",
            "approved_with_changes",
            "approved",
            "not_relevant"
          ],
          "type": "string",
          "default": "null",
          "description": "The overall proof status calculated from all the stages",
          "readOnly": true
        },
        "public_link": {
          "type": "string",
          "description": "Either null or 'https://ziflow.ziflow.io/proof/84n0ntlb1aapkdmchjgkcn9b8j'",
          "readOnly": true
        },
        "stages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Stage"
          }
        },
        "lock_on_decisions": {
          "type": "boolean",
          "default": false
        },
        "allow_source_download": {
          "type": "boolean",
          "default": false
        },
        "secure_proofing": {
          "type": "boolean",
          "default": false
        },
        "require_sign_in": {
          "type": "boolean",
          "default": false
        },
        "download_link": {
          "type": "string",
          "description": "null or URL to download the source file(s)",
          "example": "https://ziflow-proofs.s3.com/Proofs/b5ffa-2d2f-d9dd7/5f61-b1d3-78be39/ProofName.extension"
        },
        "suppress_all_emails": {
          "type": "boolean",
          "default": false,
          "description": "If true, Ziflow will not send any emails regarding this proof.nThe only emails that can be triggered are the emails that are sent when using the 'remind' function within the web application."
        },
        "workflow_template": {
          "$ref": "#/definitions/WorkflowTemplate"
        }
      }
    },
    "File": {
      "type": "object",
      "properties": {
        "source": {
          "type": "string",
          "description": "URL to proof file, can be parametrized"
        },
        "type": {
          "enum": [
            "file",
            "web-static",
            "web-interactive"
          ],
          "type": "string"
        }
      }
    },
    "WorkflowTemplate": {
      "type": "object",
      "x-nullable": true,
      "properties": {
        "id": {
          "type": "string",
          "description": "Available only on Enterprise edition. Id of an active template required to create proof from template"
        },
        "name": {
          "type": "string",
          "description": "Available only on Enterprise edition"
        }
      }
    },
    "Stage": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "default": "Stage 1"
        },
        "deadline": {
          "type": "string",
          "description": "Deadline date and time calculated when stage starts i.e. '2012-02-22T02:00:00.000Z'",
          "default": "null",
          "readOnly": true
        },
        "only_one_decision": {
          "type": "boolean",
          "default": false
        },
        "status": {
          "enum": [
            "null",
            "changes_required",
            "approved_with_changes",
            "approved",
            "not_relevant"
          ],
          "type": "string",
          "default": "null",
          "description": "The overall proof status calculated from all the reviewer's decisions",
          "readOnly": true
        },
        "members": {
          "$ref": "#/definitions/Member"
        },
        "custom_email_subject": {
          "type": "string",
          "default": "null"
        },
        "custom_email_message": {
          "type": "string",
          "default": "null"
        },
        "lock": {
          "$ref": "#/definitions/Lock"
        },
        "stage_trigger": {
          "$ref": "#/definitions/StageTrigger"
        }
      }
    },
    "StageTrigger": {
      "type": "object",
      "properties": {
        "trigger_id": {
          "type": "string",
          "readOnly": true
        },
        "trigger": {
          "$ref": "#/definitions/Trigger"
        },
        "deadline": {
          "$ref": "#/definitions/Deadline"
        }
      }
    },
    "Deadline": {
      "type": "object",
      "properties": {
        "days": {
          "type": "integer"
        },
        "time": {
          "type": "string",
          "example": "09:00:00.000Z",
          "description": "Time in UTC, required only if days=0 and has to be at least 1 hour ahead from stage start"
        }
      }
    },
    "Trigger": {
      "type": "object",
      "properties": {
        "type": {
          "enum": [
            "immediately",
            "manual",
            "on_completion",
            "on_approved",
            "on_approved_or_approvedwithchanges",
            "deadline_reached"
          ],
          "type": "string"
        },
        "parent_stage_id": {
          "type": "string"
        },
        "parent_stage_name": {
          "type": "string"
        }
      }
    },
    "Lock": {
      "type": "object",
      "properties": {
        "type": {
          "enum": [
            "manual",
            "on_completion",
            "all_dependent_stages_started",
            "next_stage_starts"
          ],
          "type": "string"
        },
        "next_stage_name": {
          "type": "string"
        },
        "next_stage_id": {
          "type": "string"
        }
      }
    },
    "Member": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "readOnly": true
        },
        "contact": {
          "$ref": "#/definitions/Contact"
        },
        "email": {
          "type": "string"
        },
        "view": {
          "type": "boolean",
          "description": "Always true"
        },
        "comment": {
          "type": "boolean",
          "default": true
        },
        "decision": {
          "type": "boolean",
          "default": false
        },
        "manage": {
          "type": "boolean",
          "default": false
        },
        "notification": {
          "enum": [
            "all_activity",
            "replies_to_my_comments",
            "decisions",
            "final_decision",
            "hourly_digest",
            "daily_digest",
            "disabled"
          ],
          "type": "string",
          "default": "all_activity"
        },
        "progress": {
          "$ref": "#/definitions/Progress"
        },
        "proof_url": {
          "type": "string",
          "readOnly": true
        },
        "decision_status": {
          "enum": [
            "null",
            "changes_required",
            "approved_with_changes",
            "approved",
            "not_relevant"
          ],
          "type": "string",
          "readOnly": true
        },
        "comments": {
          "type": "integer",
          "readOnly": true
        },
        "replies": {
          "type": "integer",
          "readOnly": true
        }
      }
    },
    "Progress": {
      "type": "object",
      "properties": {
        "notified": {
          "type": "boolean",
          "readOnly": true
        },
        "opened": {
          "type": "boolean",
          "readOnly": true
        },
        "commented": {
          "type": "boolean",
          "readOnly": true
        },
        "completed": {
          "type": "boolean",
          "readOnly": true
        }
      }
    },
    "SourceFiles": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "type": {
            "type": "string",
            "example": "file, web-static, web-interactive",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "description": "File name",
            "readOnly": true
          },
          "size": {
            "type": "integer",
            "readOnly": true
          }
        }
      }
    },
    "Versions": {
      "type": "array",
      "items": {
        "type": "object",
        "readOnly": true,
        "properties": {
          "version": {
            "type": "integer",
            "readOnly": true
          },
          "version_id": {
            "type": "string",
            "readOnly": true
          }
        }
      }
    },
    "ProofList": {
      "type": "object",
      "properties": {
        "proofs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/GetProof"
          }
        },
        "count": {
          "type": "integer"
        },
        "page": {
          "type": "integer"
        },
        "has_more": {
          "type": "boolean"
        }
      }
    },
    "ProofIdResponse": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          }
        }
      }
    },
    "ProofFromTemplate": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "workflow_template": {
            "$ref": "#/definitions/WorkflowTemplate"
          },
          "id": {
            "type": "string"
          }
        }
      }
    },
    "GetComment": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "parent_comment_id": {
          "type": "string"
        },
        "proof_id": {
          "type": "string"
        },
        "comment": {
          "type": "string"
        },
        "sequence": {
          "type": "integer"
        },
        "created_at": {
          "type": "string"
        },
        "reviewer": {
          "type": "object",
          "properties": {
            "reviewer_id": {
              "type": "string"
            },
            "email": {
              "type": "string"
            }
          }
        },
        "location": {
          "$ref": "#/definitions/Location"
        },
        "likes": {
          "type": "object",
          "properties": {
            "reviewer_id": {
              "type": "string"
            },
            "email": {
              "type": "string"
            }
          }
        },
        "replies": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/GetComment"
          }
        },
        "attachments": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "file_name": {
                "type": "string"
              },
              "download_path": {
                "type": "string"
              }
            }
          }
        },
        "deleted": {
          "type": "boolean"
        },
        "private": {
          "type": "boolean"
        },
        "markers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Markers"
          }
        }
      }
    },
    "Markers": {
      "type": "object",
      "properties": {
        "type": {
          "enum": [
            "rectangle",
            "ellipse",
            "line",
            "arrow"
          ]
        },
        "color": {
          "type": "string",
          "description": "Color in HEX format "
        },
        "start_point": {
          "$ref": "#/definitions/Coordinates"
        },
        "end_point": {
          "$ref": "#/definitions/Coordinates"
        }
      }
    },
    "Coordinates": {
      "type": "object",
      "properties": {
        "x": {
          "type": "integer"
        },
        "y": {
          "type": "integer"
        }
      }
    },
    "Location": {
      "type": "object",
      "properties": {
        "page": {
          "type": "integer"
        },
        "start_time": {
          "type": "string"
        }
      }
    },
    "CommentList": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/GetComment"
      }
    },
    "PostComment": {
      "type": "object",
      "required": [
        "comment",
        "location"
      ],
      "properties": {
        "parent_comment_id": {
          "type": "string"
        },
        "proof_id": {
          "type": "string"
        },
        "comment": {
          "type": "string"
        },
        "reviewer": {
          "type": "object",
          "properties": {
            "reviewer_id": {
              "type": "string"
            },
            "email": {
              "type": "string"
            }
          }
        },
        "location": {
          "$ref": "#/definitions/Location"
        },
        "markers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Markers"
          }
        }
      }
    }
  },
  "externalDocs": {
    "description": "Find out more about Swagger",
    "url": "http://swagger.io"
  },
  "tags": [
    {
      "name": "people",
      "description": "In Ziflow we have two type of contacts. \n One of them are Ziflow users and second one are all the guests that might have been invited to your proofs."
    },
    {
      "name": "proofs",
      "description": "Proofs are one of the fundamental building blocks of Ziflow. \n It is important to note the distinction between how proofs are represented within the application vs the API: \n Application: only the latest version of a proof visible to a logged in the user is displayed - if a proof has 4 versions, the user would see v4 with v1 to v3 sitting “behind” this latest version. \n API: each version is its own proof object and versions are linked by use of a parent ID, thereby creating a linked list of proof objects."
    },
    {
      "name": "webhooks",
      "description": "Webhooks allows you to subscribe to changes and be notified of these changes as and when they occur. \n Webhooks are basically an easy way to receive notification of changes (Events) via an HTTP POST instead of polling for them. For services accessible via HTTP this is vastly more convenient and efficient. \n \n Ziflow currently sends one Event object per POST. We will later on extend this and send arrays of Event objects per POST which should be handled by the target. "
    },
    {
      "name": "authorization",
      "description": "authorization description"
    }
  ]
}
